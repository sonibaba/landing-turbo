// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = "mongodb+srv://turbo:bP1Rl3H3DWmhsknv@turbo.tqmjj.mongodb.net/turbopizza?retryWrites=true&w=majority&maxConnecting=100"
}

model clientes {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  nombre      String
  apeMaterno  String
  apePaterno  String
  email       String        @unique
  telefono    String        @unique
  direcciones Direcciones[]
  password    String

  // Optional for WebAuthn support
  Authenticator Authenticator[]
  Account       Account[]
  Session       Session[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
}

model Direcciones {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  alias        String?
  direccion    String
  codigoPostal String?
  noExterior   String?
  noInterior   String?
  cliente      clientes? @relation(fields: [clienteId], references: [id])
  clienteId    String?   @db.ObjectId
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user clientes @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         clientes @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user clientes @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model productos {
  id                 String                  @id @default(auto()) @map("_id") @db.ObjectId
  nombre             String
  precio             Int
  puntos             Int
  estatus            Boolean                 @default(false)
  categoria          CategoriasProductosEnum
  puntos_extras      Int?
  //Orilla rellena
  orilla             Boolean?
  costo_extra_orilla Int?
  imagenes           String[]
}

enum CategoriasProductosEnum {
  pizzas
  combos
  complementos
}
